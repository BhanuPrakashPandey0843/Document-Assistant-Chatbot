

# Document Assistant

The Document Assistant is a Streamlit-based web application designed to process and interact with various document types, including PDFs, DOCX, PPTX, and plain text files. It utilizes several Python libraries for document extraction, natural language processing (NLP), and interactive chat-based interactions.

## Features

- File Upload and Processing: Upload documents (PDF, DOCX, PPTX, TXT) to extract text and create vector representations.
- Text Extraction: Utilizes PyMuPDF for PDFs, python-docx for DOCX files, python-pptx for PPTX files, and standard file reading for plain text files.
- Natural Language Processing: Integrates SpaCy for text processing and linguistic analysis.
- Interactive Chat Interface: Allows users to interact with the processed document content using a chat-based interface.
- Vector Representation: Creates vector representations (using langchain and langchain_community libraries) for document chunks to support retrieval-based question answering.
- Asynchronous Processing: Uses asyncio for asynchronous document processing.

## Installation

1. Clone the repository:
   ```bash
   git clone <repository-url>
   cd document-assistant
   ```

2. Create and activate a virtual environment:
   Open CMD and run the following commands:
   ```bash
   python -m venv venv
   venv\Scripts\activate
   ```
3. Install dependencies:
   ```bash
   pip install -r requirements.txt
   ```

4. Install and run Ollama:
   Open CMD and run these commands:
   ```bash
   ollama run mistral
   ```
   This command sets up the Ollama environment with the "mistral" model.

5. Pull the Ollama model:
   Open CMD again and run these commands:
   ```bash
   python -m venv venv
   venv\Scripts\activate
   ollama pull mistral
   ```

6. Run the Streamlit application:
   ```bash
   streamlit run chat_pdf.py
   ```

7. Open your web browser:
   Navigate to `http://localhost:8501` to access the Document Assistant.

## Usage

1. Upload File: Drag and drop your document into the designated area or use the upload button.
2. Process Document: Click on the "Process Document" button to extract text and create vector representations.
3. Chat Interface: Once processing is complete, interact with the document content through the chat input.
4. View Results: See responses generated by the assistant based on the document content.

## Libraries Used

- PyMuPDF: For PDF document processing.
- python-docx: For DOCX document processing.
- python-pptx: For PPTX document processing.
- SpaCy: For natural language processing tasks.
- langchain and langchain_community: For creating vector representations and handling text chunks.
- Streamlit: For creating the interactive web application.

## Contributing

Contributions are welcome! If you'd like to contribute to this project, please fork the repository and submit a pull request with your proposed changes.

## License

This project is licensed under the MIT License - see the LICENSE file for details.

## Acknowledgments

- Streamlit: For providing an easy-to-use framework for building interactive web applications in Python.
- SpaCy: For providing powerful and efficient tools for natural language processing.
- PyMuPDF, python-docx, python-pptx: For their contributions to document processing capabilities.
- langchain and langchain_community: For enabling advanced text processing and vectorization.
- Ollama: For providing the language model used in this project.

---
